  subroutine evalfunc(x,DIM,fct,ifid,flag,f,df,d2f,v)
    use dimKrig, only: DS
    use omp_lib
    implicit none

    integer :: DIM,ifid,fct,flag,j,k,nseed(1)
    real*8 :: x(DIM),f,df(DIM),d2f(DIM,DIM),xtmp(DIM),scal,scal2,v(DIM),prd,time,time2

    ! ifid      0: high fidelity  other:lower fidelity

    if (fct.lt.10) then

       call calcf(x,DIM,fct,f)
       if (flag.ge.1) call calcdf(x,DIM,fct,df)
       if (flag.ge.2) call calcd2f(x,DIM,fct,d2f)

       if (ifid.gt.0) then
          f=0.1*f
          df(:)=0.1*df(:)
          d2f(:,:)=0.1*d2f(:,:)
       end if

    else if (fct.ge.10) then

       call omp_set_num_threads(omp_get_max_threads())

       do k=1,DIM
          scal=DS(2,k)-DS(1,k)
          xtmp(k)=x(k)*scal+DS(1,k)
       end do
       call Eulersolve(xtmp,DIM,ifid,f,df,d2f,flag,v)
       do k=1,DIM
          scal=DS(2,k)-DS(1,k)
          df(k)=df(k)*scal
          do j=1,DIM
             scal2=DS(2,j)-DS(1,j)
             d2f(j,k)=d2f(j,k)*scal*scal2
          end do
       end do

    end if


    if (flag.eq.5) then   ! Hessian-vector product

       prd=0.0
       do k=1,DIM
          prd = prd + df(k)**2
       end do
       prd = dsqrt(prd)

       if (prd.gt.1.e-5) then ! Gradient not zero

          do k=1,DIM
             v(k) = df(k)/prd
          end do

       else
          
          ! Trick to get different random numbers for each call
          call get_seed(nseed)
          time2=secnds(time)
          time2=time2-int(time2)
          nseed(1)=nseed(1)+2*int(time2*1000000000.0)      
          call random_seed(put=nseed)
          call random_number(v)

          v(:)=2.0*v(:)-1.0

          prd=0.0 
          do k=1,DIM
              prd = prd + v(k)**2
          end do
          prd = dsqrt(prd)

          do k=1,DIM
             v(k) = v(k)/prd
          end do

       end if

       d2f(:,1) = matmul(d2f,v)

    end if

  end subroutine evalfunc

  subroutine calcf(x,DIM,fct,f)
    use dimKrig, only: DS
    implicit none

    integer :: DIM,fct,k
    real*8 :: x(DIM),f,scal,A,omeg,xtmp,xtmpp
    
    if (fct.eq.1) then
       f=0.0
       do k=1,DIM
          scal=DS(2,k)-DS(1,k)
          xtmp=x(k)*scal+DS(1,k)
          f=f+xtmp
       end do
       f=cos(f)
    else if (fct.eq.2) then
       f=1.0
       do k=1,DIM
          scal=DS(2,k)-DS(1,k)
          xtmp=x(k)*scal+DS(1,k)
          f=f+xtmp**2
       end do
       f=1.0/f
    else if (fct.eq.3) then 
       f=0.0
       do k=1,DIM-1
          scal=DS(2,k)-DS(1,k)
          xtmp=x(k)*scal+DS(1,k)
          scal=DS(2,k+1)-DS(1,k+1)
          xtmpp=x(k+1)*scal+DS(1,k+1)
          f=f+100.0*(xtmpp-xtmp**2)**2+(1-xtmp)**2
       end do
    else if (fct.eq.4) then

       A=10.0
       omeg=2.0*3.141592653589793

       f=A*real(DIM)
       do k=1,DIM
          scal=DS(2,k)-DS(1,k)
          xtmp=x(k)*scal+DS(1,k)
          f=f+xtmp**2-A*cos(omeg*xtmp)
       end do
       f=f+5.0
    else if (fct.eq.5) then
       f=0.0
       do k=1,DIM
          scal=DS(2,k)-DS(1,k)
          xtmp=x(k)*scal+DS(1,k)
          f=f+xtmp
       end do
       f=cos(f)+0.01*cos(100.0*f)
    else if (fct.eq.6) then
       f=0.0
       do k=1,DIM
          scal=DS(2,k)-DS(1,k)
          xtmp=x(k)*scal+DS(1,k)
          f=f+xtmp**2
       end do
       f=f+5.0
    else if (fct.eq.7) then
       f=0.0
       do k=1,DIM
          scal=DS(2,k)-DS(1,k)
          xtmp=x(k)*scal+DS(1,k)
          f=f+xtmp**3
       end do
       f=f+5.0
    else if (fct.eq.8) then
       f=0.0
       do k=1,DIM
          scal=DS(2,k)-DS(1,k)
          xtmp=x(k)*scal+DS(1,k)
          f=f+xtmp**4
       end do
       f=f+5.0

    else if (fct.eq.9) then
   
       scal=DS(2,1)-DS(1,1)
       xtmp=x(1)*scal+DS(1,1)
       scal=DS(2,2)-DS(1,2)
       xtmpp=x(2)*scal+DS(1,2)

!!$       if (xtmp.le.1.0 .and. xtmp.ge.-1.0 .and. xtmpp.le.1.0 .and. xtmpp.ge.-1.0) then
!!$          f=2.0
!!$       else
!!$          f=1.0
!!$       end if

       f=0.75*exp(-0.25*((9.0*xtmp-2.0)**2+(9.0*xtmpp-2.0)**2))  &
        +0.75*exp(-1.0/49.0*(9.0*xtmp+1.0)**2-0.1*(9.0*xtmpp+1.0)**2)  &
        +0.5*exp(-0.25*((9.0*xtmp-7.0)**2+(9.0*xtmpp-3.0)**2))  &
        -0.2*exp(-(9.0*xtmp-4.0)**2-(9.0*xtmpp-7.0)**2)

    end if

  end subroutine calcf

  
  subroutine calcdf(x,DIM,fct,df)
    use dimKrig, only: DS
    implicit none
    integer :: DIM,fct,k
    real*8 :: x(DIM),df(DIM),fac,scal(DIM),A,omeg,xtmp,xtmpp,xtmpm

    
    if (fct.eq.1) then
       !f=cos(x+y)

       fac=0.0
       do k=1,DIM
          scal(k)=DS(2,k)-DS(1,k)
          xtmp=x(k)*scal(k)+DS(1,k)
          fac=fac+xtmp
       end do
       
       fac=-sin(fac)
       do k=1,DIM
          df(k)=fac*scal(k)
       end do
       
    else if (fct.eq.2) then  
       !f=1.0/(1.0+x**2+y**2)

       fac=1.0
       do k=1,DIM
          scal(k)=DS(2,k)-DS(1,k)
          xtmp=x(k)*scal(k)+DS(1,k)
          fac=fac+xtmp**2
       end do
       fac=1.0/fac**2
       
       do k=1,DIM
          xtmp=x(k)*scal(k)+DS(1,k)
          df(k)=-2.0*xtmp*fac*scal(k)
       end do

    else if (fct.eq.3) then 
       !f=(1.0-x)**2 + 100.0*(y-x**2)**2

       scal(1)=DS(2,1)-DS(1,1)
       xtmp=x(1)*scal(1)+DS(1,1)
       scal(2)=DS(2,2)-DS(1,2)
       xtmpp=x(2)*scal(2)+DS(1,2)
       df(1)=(-200.0*(xtmpp-xtmp**2)*2.0*xtmp-2.d0*(1-xtmp))*scal(1)
       do k=2,DIM-1
          scal(k-1)=DS(2,k-1)-DS(1,k-1)
          xtmpm=x(k-1)*scal(k-1)+DS(1,k-1)
          scal(k)=DS(2,k)-DS(1,k)
          xtmp=x(k)*scal(k)+DS(1,k)
          scal(k+1)=DS(2,k+1)-DS(1,k+1)
          xtmpp=x(k+1)*scal(k+1)+DS(1,k+1)
          df(k)=(200.0*(xtmp-xtmpm**2)-200.0*(xtmpp-xtmp**2)*2.0*xtmp-2.0*(1-xtmp))*scal(k)
       end do
       scal(DIM-1)=DS(2,DIM-1)-DS(1,DIM-1)
       xtmp=x(DIM-1)*scal(DIM-1)+DS(1,DIM-1)
       scal(DIM)=DS(2,DIM)-DS(1,DIM)
       xtmpp=x(DIM)*scal(DIM)+DS(1,DIM)
       df(DIM)=200.0*(xtmpp-xtmp**2)*scal(DIM)

    else if (fct.eq.4) then
       ! Rastrigin

       A=10.0
       omeg=2.0*3.141592653589793

       do k=1,DIM
          scal(k)=DS(2,k)-DS(1,k)
          xtmp=x(k)*scal(k)+DS(1,k)
          df(k)=(2.0*xtmp+A*omeg*sin(omeg*xtmp))*scal(k)
       end do 

    else if (fct.eq.5) then
       !f=cos(x+y)+0.01*cos(100*(x+y))

       fac=0.0
       do k=1,DIM
          scal(k)=DS(2,k)-DS(1,k)
          xtmp=x(k)*scal(k)+DS(1,k)
          fac=fac+xtmp
       end do
       
       fac=-sin(fac)-1.0*sin(100.0*fac)
       do k=1,DIM
          df(k)=fac*scal(k)
       end do
  
    else if (fct.eq.6) then  
       !f=x**2+y**2
       
       do k=1,DIM
          scal(k)=DS(2,k)-DS(1,k)
          xtmp=x(k)*scal(k)+DS(1,k)
          df(k)=2.0*xtmp*scal(k)
       end do

    else if (fct.eq.7) then  
       !f=x**3+y**3

       do k=1,DIM
          scal(k)=DS(2,k)-DS(1,k)
          xtmp=x(k)*scal(k)+DS(1,k)
          df(k)=3.0*xtmp**2*scal(k)
       end do
   
    else if (fct.eq.8) then  
       !f=x**4+y**4

       do k=1,DIM
          scal(k)=DS(2,k)-DS(1,k)
          xtmp=x(k)*scal(k)+DS(1,k)
          df(k)=4.0*xtmp**3*scal(k)
       end do

    else if (fct.eq.9) then

       !df(:)=0.0

       scal(1)=DS(2,1)-DS(1,1)
       xtmp=x(1)*scal(1)+DS(1,1)
       scal(2)=DS(2,2)-DS(1,2)
       xtmpp=x(2)*scal(2)+DS(1,2)

       df(1)=0.75*exp(-0.25*((9.0*xtmp-2.0)**2+(9.0*xtmpp-2.0)**2))  *2.0*(-0.25)*(9.0*xtmp-2.0)*9.0  &
        +0.75*exp(-1.0/49.0*(9.0*xtmp+1.0)**2-0.1*(9.0*xtmpp+1.0)**2) * 2.0*(-1.0/49.0)*(9.0*xtmp+1.0)*9.0 &
        +0.5*exp(-0.25*((9.0*xtmp-7.0)**2+(9.0*xtmpp-3.0)**2)) *2.0* (-0.25)*(9.0*xtmp-7.0)*9.0 &
        -0.2*exp(-(9.0*xtmp-4.0)**2-(9.0*xtmpp-7.0)**2) *2.0*(9.0*xtmp-4.0)*(-9.0)

       df(2)=0.75*exp(-0.25*((9.0*xtmp-2.0)**2+(9.0*xtmpp-2.0)**2)) *2.0*(-0.25)*(9.0*xtmpp-2.0)*9.0  &
        +0.75*exp(-1.0/49.0*(9.0*xtmp+1.0)**2-0.1*(9.0*xtmpp+1.0)**2) *2.0*(-0.1)*(9.0*xtmpp+1.0)*9.0 &
        +0.5*exp(-0.25*((9.0*xtmp-7.0)**2+(9.0*xtmpp-3.0)**2)) *2.0*(-0.25)*(9.0*xtmpp-3.0)*9.0  &
        -0.2*exp(-(9.0*xtmp-4.0)**2-(9.0*xtmpp-7.0)**2) *2.0*(9.0*xtmpp-7.0)*(-9.0)
       
    end if
      
  end subroutine calcdf

  subroutine calcd2f(x,DIM,fct,d2f)
    use dimKrig, only: DS
    implicit none
    integer :: DIM,fct,j,k
    real*8 :: x(DIM),d2f(DIM,DIM),fac,scal(DIM),A,omeg,xtmp,xtmpp


    if (fct.eq.1) then
       
       !f=cos(x+y)

       fac=0.0
       do k=1,DIM
          scal(k)=DS(2,k)-DS(1,k)
          xtmp=x(k)*scal(k)+DS(1,k)
          fac=fac+xtmp
       end do
       
       fac=-cos(fac)
       do j=1,DIM
          do k=1,DIM
             d2f(j,k)=fac*scal(j)*scal(k)
          end do
       end do
       
    else if (fct.eq.2) then
       
       !f=1.0/(1.0+x**2+y**2)

       fac=1.0
       do k=1,DIM
          scal(k)=DS(2,k)-DS(1,k)
          xtmp=x(k)*scal(k)+DS(1,k)
          fac=fac+xtmp**2
       end do
       fac=1.0/fac
       
       do j=1,DIM
          do k=1,DIM
             xtmp=x(k)*scal(k)+DS(1,k)
             if (j.ne.k) then
                xtmpp=x(j)*scal(j)+DS(1,j)
                d2f(j,k)=8.0*xtmpp*xtmp*fac**3*scal(j)*scal(k)
             else
                d2f(j,k)=(-2.0+8.0*xtmp**2*fac)*fac**2*scal(j)*scal(k)
             end if
          end do
       end do
  
    else if (fct.eq.3) then 
       !f=(1.0-x)**2 + 100.0*(y-x**2)**2

       d2f(:,:)=0.0

       scal(1)=DS(2,1)-DS(1,1)
       xtmp=x(1)*scal(1)+DS(1,1)
       scal(2)=DS(2,2)-DS(1,2)
       xtmpp=x(2)*scal(2)+DS(1,2)
       d2f(1,1)=(-400.0*xtmpp+1200.0*xtmp**2+2.0)*scal(1)**2
       do k=2,DIM-1
          scal(k)=DS(2,k)-DS(1,k)
          xtmp=x(k)*scal(k)+DS(1,k)
          scal(k+1)=DS(2,k+1)-DS(1,k+1)
          xtmpp=x(k+1)*scal(k+1)+DS(1,k+1)
          d2f(k,k)=(200.0-400.0*xtmpp+1200.0*xtmp**2+2.0)*scal(k)**2
       end do
       d2f(DIM,DIM)=200.0*scal(DIM)**2
     
       do k=2,DIM
          xtmp=x(k-1)*scal(k-1)+DS(1,k-1)
          d2f(k,k-1)=-400.0*xtmp*scal(k)*scal(k-1)
          d2f(k-1,k)=d2f(k,k-1)
       end do

    else if (fct.eq.4) then
       ! Rastrigin

       A=10.0
       omeg=2.0*3.141592653589793

       d2f(:,:)=0.0
       do k=1,DIM
          scal(k)=DS(2,k)-DS(1,k)
          xtmp=x(k)*scal(k)+DS(1,k)
          d2f(k,k)=(2.0+A*omeg**2*cos(omeg*xtmp))*scal(k)**2
       end do  

    else if (fct.eq.5) then

       !f=cos(x+y)+0.01*cos(100*(x+y))

       fac=0.0
       do k=1,DIM
          scal(k)=DS(2,k)-DS(1,k)
          xtmp=x(k)*scal(k)+DS(1,k)
          fac=fac+xtmp
       end do
       
       fac=-cos(fac)-100.0*cos(100.0*fac)
       do j=1,DIM
          do k=1,DIM
             d2f(j,k)=fac*scal(j)*scal(k)
          end do
       end do

    else if (fct.eq.6) then
       
       !f=x**2+y**2

       d2f(:,:)=0.0
       do k=1,DIM
          scal(k)=DS(2,k)-DS(1,k)
          d2f(k,k)=2.0*scal(k)**2
       end do

    else if (fct.eq.7) then
       
       !f=x**3+y**3
       
       d2f(:,:)=0.0
       do k=1,DIM
          scal(k)=DS(2,k)-DS(1,k)
          xtmp=x(k)*scal(k)+DS(1,k)
          d2f(k,k)=6.0*xtmp*scal(k)**2
       end do
 
    else if (fct.eq.8) then
       
       !f=x**4+y**4
       
       d2f(:,:)=0.0
       do k=1,DIM
          scal(k)=DS(2,k)-DS(1,k)
          xtmp=x(k)*scal(k)+DS(1,k)
          d2f(k,k)=12.0*xtmp**2*scal(k)**2
       end do  

    else if (fct.eq.9) then

       d2f(:,:)=0.0
                
    end if
      
  end subroutine calcd2f




