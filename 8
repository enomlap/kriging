Binary file a.out matches
bfgs_routines.f:c        Initialize counters and scalars when task='START'.
bfgs_routines.f:c       linear path and free variables encountered. On exit,
bfgs_routines.f:c                                which have not been encountered; 
bfgs_routines.f:c                                     encountered breakpoints; and
bfgs_routines.f:c           the row of W corresponding to the breakpoint encountered.
bfgs_routines.f:c                 1 if some bound is encountered.
Delau_search.f90:    common/global/counter
Delau_search.f90:    integer :: counter,i,ii,j,jj,jjj,k,kk,kp,l,NTOEX,NTOEXtmp,triangle_node(ndim+1,100000),triangle_num,triangle_coor_num,NCP,node,knnptr(200),orderextmp(0:ndim),Dutchorder(100000),nseed,hstatad(nptstoaddpercyc)
Dutch.f90:       write(*,*) 'Zero encountered in Dutch row',info
Dutchgeninterp.f90:          write(*,*) 'Zero encountered in LIN row',info
Dutchgeninterp.f90:          write(*,*) 'Zero encountered in QUAD row',info
Binary file Dutchgeninterp.o matches
Binary file Dutch.o matches
DutchRBF.f90:          write(*,*) 'Zero encountered in LIN row',info
DutchRBF.f90:          write(*,*) 'Zero encountered in QUAD row',info
DynamicPointSelection.f90:  common/global/counter
DynamicPointSelection.f90:  integer :: counter,i,ii,j,jj,jjj,k,kk,kp,l,NTOEX,NTOEXtmp,triangle_node(ndim+1,100000),triangle_num,triangle_coor_num,NCP,node,knnptr(20000),orderextmp(0:20000),Dutchorder(100000),nseed,hstatad(nptstoaddpercyc)
Binary file krigingestimate.a matches
main1.f90:  integer:: nsamples,counter,numberpointstudy
main1.f90:              counter=0
main1.f90:                 counter=counter+1
main1.f90:                       if (counter.eq.1) write(93,*) 'Nhs','    L2diff','          Maxdiff','       Dutchdiff' 
main.f90:  integer:: nsamples,counter,numberpointstudy
main.f90:              counter=0
main.f90:                 counter=counter+1
main.f90:                       if (counter.eq.1) write(93,*) 'Nhs','    L2diff','          Maxdiff','       Dutchdiff' 
main.f90fullprogram:  integer nsamples,counter
main.f90fullprogram:              counter=0
main.f90fullprogram:                 counter=counter+1
main.f90fullprogram:                       if (counter.eq.1) write(93,*) 'Nhs','    L2diff','          Maxdiff','       Dutchdiff' 
main.f90subroutine:  integer:: nsamples,counter,numberpointstudy
main.f90subroutine:              counter=0
main.f90subroutine:                 counter=counter+1
main.f90subroutine:                       if (counter.eq.1) write(93,*) 'Nhs','    L2diff','          Maxdiff','       Dutchdiff' 
make_sample.f90:        common/global/counter
make_sample.f90:        integer :: nseed,mode,counter,nhstmp
make_sample.f90:              counter=2
make_sample.f90:    common/global/counter
make_sample.f90:    integer :: dimact,ndim,nhs,counter,j,counterin
make_sample.f90:    counterin=counter
make_sample.f90:       sample(dimact,counter)=bounds(j,dimact)
make_sample.f90:          sample(1:dimact-1,counter)=sample(1:dimact-1,counterin)
make_sample.f90:       if (j.ne.1) counter=counter+1
test.f90:  integer:: nsamples,counter,numberpointstudy
Timer.f90:    ! If the counter flipped over then we must adjust
